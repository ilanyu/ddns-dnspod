name: Build, Release, and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0
  pull_request:
    branches:
      - main

jobs:
  build-binaries:
    name: Build Binaries for ${{ matrix.target_os }}/${{ matrix.target_arch }}
    runs-on: ubuntu-latest # Go cross-compilation is well-supported on Linux runners
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          - target_os: linux
            target_arch: amd64
            asset_name_suffix: linux-amd64
          - target_os: linux
            target_arch: arm64
            asset_name_suffix: linux-arm64
          - target_os: windows
            target_arch: amd64
            asset_name_suffix: windows-amd64.exe
          - target_os: windows
            target_arch: "386" # Go uses "386" for x86
            asset_name_suffix: windows-386.exe
          - target_os: darwin
            target_arch: amd64
            asset_name_suffix: darwin-amd64
          - target_os: darwin
            target_arch: arm64
            asset_name_suffix: darwin-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Build Go application
        id: build
        env:
          GOOS: ${{ matrix.target_os }}
          GOARCH: ${{ matrix.target_arch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="ddns-dnspod"
          ASSET_NAME="${BINARY_NAME}-${{ matrix.asset_name_suffix }}"
          OUTPUT_PATH="dist/${ASSET_NAME}"
          echo "Building for $GOOS/$GOARCH..."
          go build -ldflags="-s -w" -o "${OUTPUT_PATH}" .
          echo "Built: ${OUTPUT_PATH}"
          ls -l "${OUTPUT_PATH}"
          echo "asset_path=${OUTPUT_PATH}" >> $GITHUB_OUTPUT
          echo "asset_name=${ASSET_NAME}" >> $GITHUB_OUTPUT
      
      - name: Upload binary artifact (for other jobs)
        uses: actions/upload-artifact@v4
        with:
          name: ddns-dnspod-${{ matrix.target_os }}-${{ matrix.target_arch }}
          path: dist/ddns-dnspod-${{ matrix.asset_name_suffix }}
          retention-days: 1 # Keep artifacts for a short period

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases and upload assets
    needs: build-binaries
    if: startsWith(github.ref, 'refs/tags/v') # Only run for tags
    steps:
      - name: Checkout code (for release notes, etc., if needed)
        uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-all # Download all artifacts into this directory
          # No specific name, download all artifacts produced by `build-binaries`

      - name: List downloaded artifacts
        run: ls -R dist-all

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # tag_name: ${{ github.ref_name }} # Automatically uses the tag that triggered the workflow
          # name: Release ${{ github.ref_name }}
          # body: |
          #   Automated release for ${{ github.ref_name }}
          #   See CHANGELOG.md for details.
          draft: false
          prerelease: false # Set to true if these are pre-releases
          files: |
            dist-all/ddns-dnspod-linux-amd64/ddns-dnspod-linux-amd64
            dist-all/ddns-dnspod-linux-arm64/ddns-dnspod-linux-arm64
            dist-all/ddns-dnspod-windows-amd64/ddns-dnspod-windows-amd64.exe
            dist-all/ddns-dnspod-windows-386/ddns-dnspod-windows-386.exe
            dist-all/ddns-dnspod-darwin-amd64/ddns-dnspod-darwin-amd64
            dist-all/ddns-dnspod-darwin-arm64/ddns-dnspod-darwin-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This is automatically provided

  build-and-push-docker-linux:
    name: Build and Push Linux Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # If pushing to GitHub Packages, or for Docker Hub login
    needs: build-binaries # Ensure binaries are built first
    # Run on tags and pushes to main for Docker images
    if: (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main') && github.event_name != 'pull_request'

    steps:
      - name: Check Docker Hub Username
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "Error: DOCKERHUB_USERNAME secret is not set."
            exit 1
          fi
          echo "DOCKERHUB_USERNAME check passed."

      - name: Checkout repository (needed for Dockerfile and context)
        uses: actions/checkout@v4

      - name: Download Linux binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist # Download all artifacts into dist, then Dockerfile will pick
          # We only need linux ones for Docker, but download-artifact downloads by artifact name pattern
          # So we'll download all and Dockerfile context will have them.
          # Or, be more specific if artifact names are unique enough.
          # For simplicity, download all and let Docker context have them.
          # The Dockerfile will COPY from dist/linux-amd64 and dist/linux-arm64

      - name: List downloaded artifacts for Docker
        run: |
          mkdir -p dist/linux-amd64 dist/linux-arm64 # Ensure target dirs for Dockerfile exist
          if [ -f dist/ddns-dnspod-linux-amd64/ddns-dnspod-linux-amd64 ]; then
            cp dist/ddns-dnspod-linux-amd64/ddns-dnspod-linux-amd64 dist/linux-amd64/ddns-dnspod
          else
            echo "Error: linux-amd64 binary not found after download."
            exit 1
          fi
          if [ -f dist/ddns-dnspod-linux-arm64/ddns-dnspod-linux-arm64 ]; then
            cp dist/ddns-dnspod-linux-arm64/ddns-dnspod-linux-arm64 dist/linux-arm64/ddns-dnspod
          else
            echo "Error: linux-arm64 binary not found after download."
            exit 1
          fi
          ls -R dist

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/ddns-dnspod
          tags: |
            type=semver,pattern={{version}} # For tagged releases
            type=raw,value=latest,enable={{is_default_branch}} # For main branch
            type=sha,prefix=,suffix=,event=branch,enable={{is_default_branch}} # Git SHA for main branch

      - name: Build and push multi-platform Docker image (Linux only)
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile needs access to 'dist' directory with pre-built binaries
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true # Always push if this job runs
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
